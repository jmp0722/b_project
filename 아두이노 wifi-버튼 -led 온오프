//처음에는 WiFi를 사용하기 위한 WiFi헤더를 포함하고 있다.
#include <WiFi.h>

// 그 다음으로 WiFi의 SSID와 암호 변수를 저장한다. const이니까...상수인가?!
// 잡담이지만 define이 아니라 const를 쓰는 이유는 뭘까요?? 네...pointer쓰려고.ㅎㅎ
const char* ssid     = "jspkPC";
const char* password = "12345678";


// 이제 서버를 생성한다. 80은 포트번호.
WiFiServer server(80);

void setup()
{
    Serial.begin(115200);
    pinMode(5, OUTPUT);      // set the LED pin mode
    pinMode(26,INPUT);
    delay(10);

    // We start by connecting to a WiFi network

    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    // WiFi 접속을 시작한다.
    WiFi.begin(ssid, password);

    // WiFi의 상태가 연결상태가 아니면 500ms간격으로 점 찍는다.
    // 즉 begin을 하면 사용자가 어떤 제지를 할 때까지는 계속 접속을 시도한다.
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    // WiFi에 연결이되고 DHCP로 IP를 받아오면 WiFi.localIP()확인할 수 있다.
    Serial.println(WiFi.localIP());
    
    // 위에서 선언한 서버를 시작한다.
    server.begin();
}

int value = 0;

void loop(){
 // 수신을 대기한다.
 WiFiClient client = server.available();   // listen for incoming clients

 // 만약 client가 있다면,
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {


    if(digitalRead(26)==HIGH){
      digitalWrite(5,1);
    }
    if(digitalRead(26)==LOW){
      digitalWrite(5,0);
    }
      
      // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          // 접속한 클라이언트에서의 명령이 없다면 헤더를 출력
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            // 클라이언트 화면에 문자열 2개를 출력한다.
            client.print("Click <a href=\"/H\">here</a> to turn the LED on pin 5 on.<br>");
            client.print("Click <a href=\"/L\">here</a> to turn the LED on pin 5 off.<br>");

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

        // Check to see if the client request was "GET /H" or "GET /L":
        // request가 H인지 L인지에 따라 명령울 수행한다.
        if (currentLine.endsWith("GET /H")) {
          digitalWrite(5, HIGH);               // GET /H turns the LED on
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(5, LOW);                // GET /L turns the LED off
        }
      }
    }
//     Serial.println("아무거나");
    // close the connection:
    // 처리가 끝나면 client와의 연결을 끊는다.
    client.stop();
    Serial.println("Client Disconnected.");
  }
  


  
}
